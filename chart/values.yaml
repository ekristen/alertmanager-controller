replicaCount: 1

minReadySeconds: 0

image:
  repository: ghcr.io/ekristen/alertmanager-controller
  tag: 1.0.0
  pullPolicy: IfNotPresent
  pullSecret: nowsecure

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1

readinessProbe: {}
#  httpGet:
#    path: /health
#    port: 8080
#  initialDelaySeconds: 60
#  timeoutSeconds: 30
#  failureThreshold: 24

livenessProbe: {}
#  httpGet:
#    path: /health
#    port: 8080
#  initialDelaySeconds: 60
#  timeoutSeconds: 30
#  failureThreshold: 24

container:
  port: 8080

metrics:
  enabled: true
  path: /metrics

## Pod Annotations
podAnnotations: {}

## Pod Labels
podLabels: {}

## Deployment annotations
# annotations: {}

service:
  enabled: true
  annotations: {}

affinity: {}

tolerations:
  []
  # - key: CriticalAddonsOnly
  #  operator: Exists

## Extra environment variables that will be pass into pods
env: {}
#  key: value
#  key: value

## Extra environment variables (from existing secrets) that will be pass into pods
envFromSecret: {}
#  SPRING_DATASOURCE_URL:
#    secretName: app-secret
#    secretKeyRef: first-key

resources: {}
#  limits:
#    cpu: "1.0"
#    memory: 1024Mi
#  requests:
#    cpu: 200m
#    memory: 1024Mi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

ingress:
  enabled: false
  tls:
    enabled: true
    secret: {}
  host: example.nowsecure.io
  #  path: / (default)
  #   annotations:
  #     certmanager.k8s.io/acme-challenge-type: "http01"
  #     certmanager.k8s.io/cluster-issuer: "letsencrypt"
  #     kubernetes.io/tls-acme: "true"
  #     nginx.ingress.kubernetes.io: ""
  #     nginx.ingress.kubernetes.io/auth-signin: "https://oidc/oauth2/start?rd=https://$host$request_uri$is_args$args"
  #     nginx.ingress.kubernetes.io/auth-url: "https://oidc/oauth2/auth"
  additionalPaths: {}
#    - path: "/api"
#      serviceName: xyz
#      servicePort: 80

configMaps: {}
#    ops-tool-client:
#      data:
#        default.conf: |
#          server {
#              listen       80;
#              server_name  ops-tool-client;
#
#              location / {
#                  root /usr/share/nginx/html;
#                  try_files $uri /index.html;
#              }
#
#              location /sw.js {
#                  add_header Cache-Control "no-cache";
#                  proxy_cache_bypass $http_pragma;
#                  proxy_cache_revalidate on;
#                  expires off;
#                  access_log off;
#              }
#
#              location /api/ {
#                  proxy_pass {{ .Values.client.configuration.serverEndpoint }};
#              }
#          }

## Secret mounts & volume mounts
# Defines mounts with secrets. Secrets must be manually created in the namespace.
volumes:
  enabled: false
  volumes: {}
  #  - name: cache-volume
  #    emptyDir: {}
  volumeMounts: {}
  #  - path: /cache
  #    name: cache-volume
  secretVolumeMounts: {}
  #   - name: secret-files
  #     path: /etc/secrets
  #     items:
  #     - key: blah
  #     - path: </etc/secrets>/blah
  #   - name: secret-files
  #     path: /etc/secrets
  secretVolumes: {}
  #   - name: secret-files
  #     secretName: some-secret-files
  #   - name: secret-files
  #     secretName: some-secret-files
  configMapVolumeMounts: {}
  #      - name: config-map-files
  #        path: /etc/config
  configMapVolumes: {}
#      - name: config-map-files
#        configMapName: config-map-name

hooks: {}
#  - hook: post-install,post-upgrade
#    containers:
#      - name: post
#        image: alpine:3.3
#        args: ["/bin/sleep","{{ default "10" .Values.sleepyTime }}"]
#        env:
#          key: value
#        envFromSecret:
#          - name: env_var_name
#          - secretName: name_of_secret
#          - secretKeyRef: key_in_secret
